type AggregateDiagnosis {
  count: Int!
}

type AggregateEncounterCodeableConcept {
  count: Int!
}

type AggregateEncounterCoding {
  count: Int!
}

type AggregateEncounterModel {
  count: Int!
}

type AggregateReference {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Diagnosis {
  id: ID!
  use: EncounterCodeableConcept!
  condition: Reference
}

type DiagnosisConnection {
  pageInfo: PageInfo!
  edges: [DiagnosisEdge]!
  aggregate: AggregateDiagnosis!
}

input DiagnosisCreateInput {
  id: ID
  use: EncounterCodeableConceptCreateOneInput!
  condition: ReferenceCreateOneInput
}

input DiagnosisCreateManyInput {
  create: [DiagnosisCreateInput!]
  connect: [DiagnosisWhereUniqueInput!]
}

type DiagnosisEdge {
  node: Diagnosis!
  cursor: String!
}

enum DiagnosisOrderByInput {
  id_ASC
  id_DESC
}

type DiagnosisPreviousValues {
  id: ID!
}

input DiagnosisScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [DiagnosisScalarWhereInput!]
  OR: [DiagnosisScalarWhereInput!]
  NOT: [DiagnosisScalarWhereInput!]
}

type DiagnosisSubscriptionPayload {
  mutation: MutationType!
  node: Diagnosis
  updatedFields: [String!]
  previousValues: DiagnosisPreviousValues
}

input DiagnosisSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiagnosisWhereInput
  AND: [DiagnosisSubscriptionWhereInput!]
  OR: [DiagnosisSubscriptionWhereInput!]
  NOT: [DiagnosisSubscriptionWhereInput!]
}

input DiagnosisUpdateDataInput {
  use: EncounterCodeableConceptUpdateOneRequiredInput
  condition: ReferenceUpdateOneInput
}

input DiagnosisUpdateInput {
  use: EncounterCodeableConceptUpdateOneRequiredInput
  condition: ReferenceUpdateOneInput
}

input DiagnosisUpdateManyInput {
  create: [DiagnosisCreateInput!]
  update: [DiagnosisUpdateWithWhereUniqueNestedInput!]
  upsert: [DiagnosisUpsertWithWhereUniqueNestedInput!]
  delete: [DiagnosisWhereUniqueInput!]
  connect: [DiagnosisWhereUniqueInput!]
  set: [DiagnosisWhereUniqueInput!]
  disconnect: [DiagnosisWhereUniqueInput!]
  deleteMany: [DiagnosisScalarWhereInput!]
}

input DiagnosisUpdateWithWhereUniqueNestedInput {
  where: DiagnosisWhereUniqueInput!
  data: DiagnosisUpdateDataInput!
}

input DiagnosisUpsertWithWhereUniqueNestedInput {
  where: DiagnosisWhereUniqueInput!
  update: DiagnosisUpdateDataInput!
  create: DiagnosisCreateInput!
}

input DiagnosisWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  use: EncounterCodeableConceptWhereInput
  condition: ReferenceWhereInput
  AND: [DiagnosisWhereInput!]
  OR: [DiagnosisWhereInput!]
  NOT: [DiagnosisWhereInput!]
}

input DiagnosisWhereUniqueInput {
  id: ID
}

type EncounterCodeableConcept {
  id: ID!
  coding(where: EncounterCodingWhereInput, orderBy: EncounterCodingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EncounterCoding!]
  text: String
}

type EncounterCodeableConceptConnection {
  pageInfo: PageInfo!
  edges: [EncounterCodeableConceptEdge]!
  aggregate: AggregateEncounterCodeableConcept!
}

input EncounterCodeableConceptCreateInput {
  id: ID
  coding: EncounterCodingCreateManyInput
  text: String
}

input EncounterCodeableConceptCreateOneInput {
  create: EncounterCodeableConceptCreateInput
  connect: EncounterCodeableConceptWhereUniqueInput
}

type EncounterCodeableConceptEdge {
  node: EncounterCodeableConcept!
  cursor: String!
}

enum EncounterCodeableConceptOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
}

type EncounterCodeableConceptPreviousValues {
  id: ID!
  text: String
}

type EncounterCodeableConceptSubscriptionPayload {
  mutation: MutationType!
  node: EncounterCodeableConcept
  updatedFields: [String!]
  previousValues: EncounterCodeableConceptPreviousValues
}

input EncounterCodeableConceptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EncounterCodeableConceptWhereInput
  AND: [EncounterCodeableConceptSubscriptionWhereInput!]
  OR: [EncounterCodeableConceptSubscriptionWhereInput!]
  NOT: [EncounterCodeableConceptSubscriptionWhereInput!]
}

input EncounterCodeableConceptUpdateDataInput {
  coding: EncounterCodingUpdateManyInput
  text: String
}

input EncounterCodeableConceptUpdateInput {
  coding: EncounterCodingUpdateManyInput
  text: String
}

input EncounterCodeableConceptUpdateManyMutationInput {
  text: String
}

input EncounterCodeableConceptUpdateOneRequiredInput {
  create: EncounterCodeableConceptCreateInput
  update: EncounterCodeableConceptUpdateDataInput
  upsert: EncounterCodeableConceptUpsertNestedInput
  connect: EncounterCodeableConceptWhereUniqueInput
}

input EncounterCodeableConceptUpsertNestedInput {
  update: EncounterCodeableConceptUpdateDataInput!
  create: EncounterCodeableConceptCreateInput!
}

input EncounterCodeableConceptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coding_every: EncounterCodingWhereInput
  coding_some: EncounterCodingWhereInput
  coding_none: EncounterCodingWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [EncounterCodeableConceptWhereInput!]
  OR: [EncounterCodeableConceptWhereInput!]
  NOT: [EncounterCodeableConceptWhereInput!]
}

input EncounterCodeableConceptWhereUniqueInput {
  id: ID
}

type EncounterCoding {
  id: ID!
  system: String
  version: String
  code: String
  display: String
  userSelected: Boolean
}

type EncounterCodingConnection {
  pageInfo: PageInfo!
  edges: [EncounterCodingEdge]!
  aggregate: AggregateEncounterCoding!
}

input EncounterCodingCreateInput {
  id: ID
  system: String
  version: String
  code: String
  display: String
  userSelected: Boolean
}

input EncounterCodingCreateManyInput {
  create: [EncounterCodingCreateInput!]
  connect: [EncounterCodingWhereUniqueInput!]
}

type EncounterCodingEdge {
  node: EncounterCoding!
  cursor: String!
}

enum EncounterCodingOrderByInput {
  id_ASC
  id_DESC
  system_ASC
  system_DESC
  version_ASC
  version_DESC
  code_ASC
  code_DESC
  display_ASC
  display_DESC
  userSelected_ASC
  userSelected_DESC
}

type EncounterCodingPreviousValues {
  id: ID!
  system: String
  version: String
  code: String
  display: String
  userSelected: Boolean
}

input EncounterCodingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  system: String
  system_not: String
  system_in: [String!]
  system_not_in: [String!]
  system_lt: String
  system_lte: String
  system_gt: String
  system_gte: String
  system_contains: String
  system_not_contains: String
  system_starts_with: String
  system_not_starts_with: String
  system_ends_with: String
  system_not_ends_with: String
  version: String
  version_not: String
  version_in: [String!]
  version_not_in: [String!]
  version_lt: String
  version_lte: String
  version_gt: String
  version_gte: String
  version_contains: String
  version_not_contains: String
  version_starts_with: String
  version_not_starts_with: String
  version_ends_with: String
  version_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  display: String
  display_not: String
  display_in: [String!]
  display_not_in: [String!]
  display_lt: String
  display_lte: String
  display_gt: String
  display_gte: String
  display_contains: String
  display_not_contains: String
  display_starts_with: String
  display_not_starts_with: String
  display_ends_with: String
  display_not_ends_with: String
  userSelected: Boolean
  userSelected_not: Boolean
  AND: [EncounterCodingScalarWhereInput!]
  OR: [EncounterCodingScalarWhereInput!]
  NOT: [EncounterCodingScalarWhereInput!]
}

type EncounterCodingSubscriptionPayload {
  mutation: MutationType!
  node: EncounterCoding
  updatedFields: [String!]
  previousValues: EncounterCodingPreviousValues
}

input EncounterCodingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EncounterCodingWhereInput
  AND: [EncounterCodingSubscriptionWhereInput!]
  OR: [EncounterCodingSubscriptionWhereInput!]
  NOT: [EncounterCodingSubscriptionWhereInput!]
}

input EncounterCodingUpdateDataInput {
  system: String
  version: String
  code: String
  display: String
  userSelected: Boolean
}

input EncounterCodingUpdateInput {
  system: String
  version: String
  code: String
  display: String
  userSelected: Boolean
}

input EncounterCodingUpdateManyDataInput {
  system: String
  version: String
  code: String
  display: String
  userSelected: Boolean
}

input EncounterCodingUpdateManyInput {
  create: [EncounterCodingCreateInput!]
  update: [EncounterCodingUpdateWithWhereUniqueNestedInput!]
  upsert: [EncounterCodingUpsertWithWhereUniqueNestedInput!]
  delete: [EncounterCodingWhereUniqueInput!]
  connect: [EncounterCodingWhereUniqueInput!]
  set: [EncounterCodingWhereUniqueInput!]
  disconnect: [EncounterCodingWhereUniqueInput!]
  deleteMany: [EncounterCodingScalarWhereInput!]
  updateMany: [EncounterCodingUpdateManyWithWhereNestedInput!]
}

input EncounterCodingUpdateManyMutationInput {
  system: String
  version: String
  code: String
  display: String
  userSelected: Boolean
}

input EncounterCodingUpdateManyWithWhereNestedInput {
  where: EncounterCodingScalarWhereInput!
  data: EncounterCodingUpdateManyDataInput!
}

input EncounterCodingUpdateWithWhereUniqueNestedInput {
  where: EncounterCodingWhereUniqueInput!
  data: EncounterCodingUpdateDataInput!
}

input EncounterCodingUpsertWithWhereUniqueNestedInput {
  where: EncounterCodingWhereUniqueInput!
  update: EncounterCodingUpdateDataInput!
  create: EncounterCodingCreateInput!
}

input EncounterCodingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  system: String
  system_not: String
  system_in: [String!]
  system_not_in: [String!]
  system_lt: String
  system_lte: String
  system_gt: String
  system_gte: String
  system_contains: String
  system_not_contains: String
  system_starts_with: String
  system_not_starts_with: String
  system_ends_with: String
  system_not_ends_with: String
  version: String
  version_not: String
  version_in: [String!]
  version_not_in: [String!]
  version_lt: String
  version_lte: String
  version_gt: String
  version_gte: String
  version_contains: String
  version_not_contains: String
  version_starts_with: String
  version_not_starts_with: String
  version_ends_with: String
  version_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  display: String
  display_not: String
  display_in: [String!]
  display_not_in: [String!]
  display_lt: String
  display_lte: String
  display_gt: String
  display_gte: String
  display_contains: String
  display_not_contains: String
  display_starts_with: String
  display_not_starts_with: String
  display_ends_with: String
  display_not_ends_with: String
  userSelected: Boolean
  userSelected_not: Boolean
  AND: [EncounterCodingWhereInput!]
  OR: [EncounterCodingWhereInput!]
  NOT: [EncounterCodingWhereInput!]
}

input EncounterCodingWhereUniqueInput {
  id: ID
}

type EncounterModel {
  id: ID!
  subject: Reference!
  diagnosis(where: DiagnosisWhereInput, orderBy: DiagnosisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Diagnosis!]
}

type EncounterModelConnection {
  pageInfo: PageInfo!
  edges: [EncounterModelEdge]!
  aggregate: AggregateEncounterModel!
}

input EncounterModelCreateInput {
  id: ID
  subject: ReferenceCreateOneInput!
  diagnosis: DiagnosisCreateManyInput
}

type EncounterModelEdge {
  node: EncounterModel!
  cursor: String!
}

enum EncounterModelOrderByInput {
  id_ASC
  id_DESC
}

type EncounterModelPreviousValues {
  id: ID!
}

type EncounterModelSubscriptionPayload {
  mutation: MutationType!
  node: EncounterModel
  updatedFields: [String!]
  previousValues: EncounterModelPreviousValues
}

input EncounterModelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EncounterModelWhereInput
  AND: [EncounterModelSubscriptionWhereInput!]
  OR: [EncounterModelSubscriptionWhereInput!]
  NOT: [EncounterModelSubscriptionWhereInput!]
}

input EncounterModelUpdateInput {
  subject: ReferenceUpdateOneRequiredInput
  diagnosis: DiagnosisUpdateManyInput
}

input EncounterModelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subject: ReferenceWhereInput
  diagnosis_every: DiagnosisWhereInput
  diagnosis_some: DiagnosisWhereInput
  diagnosis_none: DiagnosisWhereInput
  AND: [EncounterModelWhereInput!]
  OR: [EncounterModelWhereInput!]
  NOT: [EncounterModelWhereInput!]
}

input EncounterModelWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDiagnosis(data: DiagnosisCreateInput!): Diagnosis!
  updateDiagnosis(data: DiagnosisUpdateInput!, where: DiagnosisWhereUniqueInput!): Diagnosis
  upsertDiagnosis(where: DiagnosisWhereUniqueInput!, create: DiagnosisCreateInput!, update: DiagnosisUpdateInput!): Diagnosis!
  deleteDiagnosis(where: DiagnosisWhereUniqueInput!): Diagnosis
  deleteManyDiagnoses(where: DiagnosisWhereInput): BatchPayload!
  createEncounterCodeableConcept(data: EncounterCodeableConceptCreateInput!): EncounterCodeableConcept!
  updateEncounterCodeableConcept(data: EncounterCodeableConceptUpdateInput!, where: EncounterCodeableConceptWhereUniqueInput!): EncounterCodeableConcept
  updateManyEncounterCodeableConcepts(data: EncounterCodeableConceptUpdateManyMutationInput!, where: EncounterCodeableConceptWhereInput): BatchPayload!
  upsertEncounterCodeableConcept(where: EncounterCodeableConceptWhereUniqueInput!, create: EncounterCodeableConceptCreateInput!, update: EncounterCodeableConceptUpdateInput!): EncounterCodeableConcept!
  deleteEncounterCodeableConcept(where: EncounterCodeableConceptWhereUniqueInput!): EncounterCodeableConcept
  deleteManyEncounterCodeableConcepts(where: EncounterCodeableConceptWhereInput): BatchPayload!
  createEncounterCoding(data: EncounterCodingCreateInput!): EncounterCoding!
  updateEncounterCoding(data: EncounterCodingUpdateInput!, where: EncounterCodingWhereUniqueInput!): EncounterCoding
  updateManyEncounterCodings(data: EncounterCodingUpdateManyMutationInput!, where: EncounterCodingWhereInput): BatchPayload!
  upsertEncounterCoding(where: EncounterCodingWhereUniqueInput!, create: EncounterCodingCreateInput!, update: EncounterCodingUpdateInput!): EncounterCoding!
  deleteEncounterCoding(where: EncounterCodingWhereUniqueInput!): EncounterCoding
  deleteManyEncounterCodings(where: EncounterCodingWhereInput): BatchPayload!
  createEncounterModel(data: EncounterModelCreateInput!): EncounterModel!
  updateEncounterModel(data: EncounterModelUpdateInput!, where: EncounterModelWhereUniqueInput!): EncounterModel
  upsertEncounterModel(where: EncounterModelWhereUniqueInput!, create: EncounterModelCreateInput!, update: EncounterModelUpdateInput!): EncounterModel!
  deleteEncounterModel(where: EncounterModelWhereUniqueInput!): EncounterModel
  deleteManyEncounterModels(where: EncounterModelWhereInput): BatchPayload!
  createReference(data: ReferenceCreateInput!): Reference!
  updateReference(data: ReferenceUpdateInput!, where: ReferenceWhereUniqueInput!): Reference
  updateManyReferences(data: ReferenceUpdateManyMutationInput!, where: ReferenceWhereInput): BatchPayload!
  upsertReference(where: ReferenceWhereUniqueInput!, create: ReferenceCreateInput!, update: ReferenceUpdateInput!): Reference!
  deleteReference(where: ReferenceWhereUniqueInput!): Reference
  deleteManyReferences(where: ReferenceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  diagnosis(where: DiagnosisWhereUniqueInput!): Diagnosis
  diagnoses(where: DiagnosisWhereInput, orderBy: DiagnosisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Diagnosis]!
  diagnosesConnection(where: DiagnosisWhereInput, orderBy: DiagnosisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiagnosisConnection!
  encounterCodeableConcept(where: EncounterCodeableConceptWhereUniqueInput!): EncounterCodeableConcept
  encounterCodeableConcepts(where: EncounterCodeableConceptWhereInput, orderBy: EncounterCodeableConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EncounterCodeableConcept]!
  encounterCodeableConceptsConnection(where: EncounterCodeableConceptWhereInput, orderBy: EncounterCodeableConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EncounterCodeableConceptConnection!
  encounterCoding(where: EncounterCodingWhereUniqueInput!): EncounterCoding
  encounterCodings(where: EncounterCodingWhereInput, orderBy: EncounterCodingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EncounterCoding]!
  encounterCodingsConnection(where: EncounterCodingWhereInput, orderBy: EncounterCodingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EncounterCodingConnection!
  encounterModel(where: EncounterModelWhereUniqueInput!): EncounterModel
  encounterModels(where: EncounterModelWhereInput, orderBy: EncounterModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EncounterModel]!
  encounterModelsConnection(where: EncounterModelWhereInput, orderBy: EncounterModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EncounterModelConnection!
  reference(where: ReferenceWhereUniqueInput!): Reference
  references(where: ReferenceWhereInput, orderBy: ReferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reference]!
  referencesConnection(where: ReferenceWhereInput, orderBy: ReferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReferenceConnection!
  node(id: ID!): Node
}

type Reference {
  id: ID!
  reference: String!
  type: String
  display: String
}

type ReferenceConnection {
  pageInfo: PageInfo!
  edges: [ReferenceEdge]!
  aggregate: AggregateReference!
}

input ReferenceCreateInput {
  id: ID
  reference: String!
  type: String
  display: String
}

input ReferenceCreateOneInput {
  create: ReferenceCreateInput
  connect: ReferenceWhereUniqueInput
}

type ReferenceEdge {
  node: Reference!
  cursor: String!
}

enum ReferenceOrderByInput {
  id_ASC
  id_DESC
  reference_ASC
  reference_DESC
  type_ASC
  type_DESC
  display_ASC
  display_DESC
}

type ReferencePreviousValues {
  id: ID!
  reference: String!
  type: String
  display: String
}

type ReferenceSubscriptionPayload {
  mutation: MutationType!
  node: Reference
  updatedFields: [String!]
  previousValues: ReferencePreviousValues
}

input ReferenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReferenceWhereInput
  AND: [ReferenceSubscriptionWhereInput!]
  OR: [ReferenceSubscriptionWhereInput!]
  NOT: [ReferenceSubscriptionWhereInput!]
}

input ReferenceUpdateDataInput {
  reference: String
  type: String
  display: String
}

input ReferenceUpdateInput {
  reference: String
  type: String
  display: String
}

input ReferenceUpdateManyMutationInput {
  reference: String
  type: String
  display: String
}

input ReferenceUpdateOneInput {
  create: ReferenceCreateInput
  update: ReferenceUpdateDataInput
  upsert: ReferenceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ReferenceWhereUniqueInput
}

input ReferenceUpdateOneRequiredInput {
  create: ReferenceCreateInput
  update: ReferenceUpdateDataInput
  upsert: ReferenceUpsertNestedInput
  connect: ReferenceWhereUniqueInput
}

input ReferenceUpsertNestedInput {
  update: ReferenceUpdateDataInput!
  create: ReferenceCreateInput!
}

input ReferenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  reference: String
  reference_not: String
  reference_in: [String!]
  reference_not_in: [String!]
  reference_lt: String
  reference_lte: String
  reference_gt: String
  reference_gte: String
  reference_contains: String
  reference_not_contains: String
  reference_starts_with: String
  reference_not_starts_with: String
  reference_ends_with: String
  reference_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  display: String
  display_not: String
  display_in: [String!]
  display_not_in: [String!]
  display_lt: String
  display_lte: String
  display_gt: String
  display_gte: String
  display_contains: String
  display_not_contains: String
  display_starts_with: String
  display_not_starts_with: String
  display_ends_with: String
  display_not_ends_with: String
  AND: [ReferenceWhereInput!]
  OR: [ReferenceWhereInput!]
  NOT: [ReferenceWhereInput!]
}

input ReferenceWhereUniqueInput {
  id: ID
}

type Subscription {
  diagnosis(where: DiagnosisSubscriptionWhereInput): DiagnosisSubscriptionPayload
  encounterCodeableConcept(where: EncounterCodeableConceptSubscriptionWhereInput): EncounterCodeableConceptSubscriptionPayload
  encounterCoding(where: EncounterCodingSubscriptionWhereInput): EncounterCodingSubscriptionPayload
  encounterModel(where: EncounterModelSubscriptionWhereInput): EncounterModelSubscriptionPayload
  reference(where: ReferenceSubscriptionWhereInput): ReferenceSubscriptionPayload
}
